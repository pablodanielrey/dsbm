
@startuml c12 Comprar Libro - Flujo normal

title c12 Comprar Libro - Flujo normal

actor Cliente as c
participant Libreria as l
participant "cliente:Cliente" as cliente
participant Compra as compra
participant "libro:Libro" as libro
participant "ingreso:Ingreso" as ingreso
participant "cuenta:Cuenta" as cuenta
participant "categoria:Categoria" as categoria
participant "vip:ClienteVIP" as vip

activate c
c -> l : libros = iniciar_compra(cliente)
activate l
    l -> l : almacenar_en_sesion(cliente)
    l -> l : libros_disponibles = buscar_libros_disponibles()
    activate l
    loop libro in libros
        l -> libro : libro.agregate_si_hay_stock(libros_disponibles)
    end
    deactivate l
    c <-- l : libros_disponibles
deactivate l

c -> l : seleccionar_libro(libro)
activate l
    l -> l : cliente = obtener_cliente_de_sesion()
    l -> cliente : comprar(libro)
    activate cliente
        cliente -> compra ** : crear
        cliente -> compra : calcular_costo(cliente, libro)
        activate compra
            'el costo depende del tipo de libro y del tipo de cliente
            compra -> libro : costo_total = calcular_costo(cliente)
            note right: El libro sabe como calcular costo+comisión+envío\nIngreso sabe el costo\npor ahi este algoritmo debería corresponder a la compra?
            activate libro
                libro -> ingreso : costo = costo()
                activate ingreso
                    libro <-- ingreso : costo
                deactivate ingreso
                libro -> libro : comision = calcular_comision(costo)

                alt libro == Impreso
                    libro -> cliente : costo_envio = costo_envio()
                    activate cliente
                        cliente -> categoria : costo_envio = costo_envio()
                        note right : el costo depende de la categoría del cliente
                        activate categoria

                            'cliente <-- categoria
                        deactivate categoria

                        libro <-- cliente
                    deactivate cliente
                end

                compra <-- libro : costo_total
            deactivate libro
               
            cliente <-- compra
        deactivate compra
        cliente -> cliente : agregar(compra)

        l <-- cliente : compra
    deactivate cliente

    return compra
deactivate l

c -> l : confirmar_compra(compra)
note right : si al cliente le parece correcto el monto confirma la compra
activate l
    l -> l : cliente = obtener_cliente_de_sesion()

    l -> compra : confirmar(cliente)
    activate compra
        ref over compra, libro : c9 - Actualizar Stock
        compra -> libro : actualizar_stock()
        activate libro
            compra <-- libro
        deactivate libro

        compra -> cliente : descontar_monto(monto)
        activate cliente
            cliente -> cuenta : ok = descontar_monto(monto)
            activate cuenta
                cliente <-- cuenta : ok
            deactivate cuenta
            
            compra <-- cliente : ok
        deactivate cliente

        l <-- compra : ok
    deactivate compra


    l -> cliente : cambiar_categoria()
    activate cliente
        loop montos = 0; compra in compras
            alt compra.fecha >= inicio_mes
                cliente -> compra : agregar_monto_para_cambio_categoria(montos)
                note right : deje la lógica en el cliente.
                activate compra
                deactivate compra
            end
        end 
        alt montos > 5000
            cliente -> vip ** : categoria = <<crear>>
            cliente -> cliente : asignar_categoria(categoria)
        end
        l <-- cliente
    deactivate cliente

    c <-- l
deactivate l

deactivate c

@enduml

@startuml

actor Cliente as c
participant Sistema as s
participant Libreria as l
participant Compra as compra
participant "libro:Libro" as libro
participant "cliente:Cliente" as cliente
participant "ingreso:Ingreso" as ingreso
participant "cuenta:Cuenta" as cuenta
participant "vip:ClienteVIP" as vip

            alt ultimos_costos > 5000
                l -> vip : vip = obtener_instancia()
                activate vip
                    l <-- vip : instancia
                deactivate vip

                l -> cliente : cambiar_categoria(vip)
                activate cliente
                    l <-- cliente
                deactivate cliente
            end
@enduml

@startuml consulta_sobre_modelado1

participant Libreria as l
participant Cliente as cliente
participant "vip:ClienteVIP" as vip

l -> l : cambiar_categoría_cliente()
activate l

    == alternativa 1 ==

    loop compra in compras
        alt compra.fecha > principio_mes
            l -> compra : agregar_costo(ultimos_costos)
        end
    end
    note left : como modelar el tema de las colecciones?\n ultimos_costos=0\nfor compra in compras:\n  if compra.date > inicio_mes:\n      compra.agregar_costo(ultimos_costos)

    == alternativa 2 ==

    loop compra in compras
        l -> compra : agregar_costo(ultimos_costos)
    end


deactivate l
@enduml

@startuml consulta_sobre_modelado2_categoría

participant Libreria as l
participant Cliente as cliente
participant "vip:ClienteVIP" as vip


l -> l : cambiar_categoría_cliente()
activate l

    == Esta opción? ==

    alt ultimos_costos > 5000
        l -> cliente : cambiar_categoria_vip()
        activate cliente
            cliente -> vip **: crear
            cliente -> cliente : asignar_categoria(vip)
            l <-- cliente
        deactivate cliente
    end

    == O esta opción ==

    alt ultimos_costos > 5000
        l -> cliente : cambiar_categoria_vip()
        activate cliente
            cliente -> vip : vip = obtener_instancia()
            activate vip
                cliente <-- vip : instancia
            deactivate vip
            cliente -> cliente : asignar_categoria(vip)
            l <-- cliente
        deactivate cliente
    end

    == O inclusive esta\n me gusta un poco mas\n ya que el proceso de selección de categoría dependería de la librería ==

    alt ultimos_costos > 5000
        l -> vip : vip = obtener_instancia()
        activate vip
            l <-- vip : instancia
        deactivate vip

        l -> cliente : cambiar_categoria(vip)
        activate cliente
            l <-- cliente
        deactivate cliente
    end


deactivate l
@enduml