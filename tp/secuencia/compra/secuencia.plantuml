
@startuml c12 Comprar Libro - Flujo normal

title c12 Comprar Libro - Flujo normal

actor Cliente as c
participant Libreria as l
participant "cliente:Cliente" as cliente
participant "compra:CompraStock" as compra
participant "libro:Libro" as libro
participant "ingreso:Ingreso" as ingreso
participant "cuenta:Cuenta" as cuenta
participant "categoria:Categoria" as categoria
participant "vip:ClienteVIP" as vip
participant "oferta:Oferta" as oferta

activate c
c -> l : libros = iniciar_compra(cliente)
activate l
    l -> l : almacenar_en_sesion(cliente)
    l -> l : libros_disponibles = buscar_libros_disponibles()
    activate l
    loop libro in libros
        l -> libro : libro.agregate_si_hay_stock(libros_disponibles)
    end
    deactivate l
    c <-- l : libros_disponibles
deactivate l

c -> l : seleccionar_libro(libro)
activate l
    l -> l : cliente = obtener_cliente_de_sesion()
    l -> cliente : comprar(libro)
    activate cliente
        cliente -> compra ** : crear
        cliente -> compra : calcular_costo(cliente, libro)
        note right : c13 - Calcular Costo\nen vez de ponerle una ref lo diagramo aca para que se pueda ver la interacción entre las clases\ny como distribuí la lógica del cálculo del costo
        activate compra
            'el costo depende del tipo de libro y del tipo de cliente
            compra -> libro : costo_total = calcular_costo(cliente)
            note right: El libro sabe como calcular costo+comisión+envío\nIngreso sabe el costo\npor ahi este algoritmo debería corresponder a la compra?
            activate libro
                libro -> ingreso : costo = costo()
                activate ingreso
                    libro <-- ingreso : costo
                deactivate ingreso
                libro -> libro : comision = calcular_comision(costo)

                alt instance(libro) == Impreso
                    libro -> cliente : costo_envio = costo_envio()
                    activate cliente
                        cliente -> categoria : costo_envio = costo_envio()
                        note right : el costo depende de la categoría del cliente
                        activate categoria

                            'cliente <-- categoria
                        deactivate categoria

                        libro <-- cliente
                    deactivate cliente
                end
                note right: aca uso polimorfismo como patrón de diseño

                libro -> libro : costo_total = costo_envio + comision + costo

                compra <-- libro : costo_total
            deactivate libro

            cliente <-- compra
        deactivate compra
        cliente -> cliente : agregar(compra)

        l <-- cliente : compra
    deactivate cliente

    loop oferta in ofertas
        l -> oferta : calcular_descuento(compra)
        activate oferta
            oferta -> compra : obtener_fecha()
            activate compra
                oferta <-- compra : fecha
            deactivate compra

            note left : evalúo si la oferta es esta activa\ny aplica a la compra
            alt fecha > fecha_inicio and fecha < fecha_fin
                oferta -> oferta : costo_actualizado = calcular_descuento(compra)
                oferta -> compra : aplicar_descuento(costo_actualizado)
                activate compra
                deactivate compra
                note right : se calcula el costo y \nse actualiza el monto dentro de la compra
            end

            l <-- oferta
        deactivate oferta
    end

    return compra
deactivate l

c -> l : confirmar_compra(compra)
note right : si al cliente le parece correcto el monto confirma la compra
activate l
    l -> l : cliente = obtener_cliente_de_sesion()

    l -> compra : confirmar(cliente)
    activate compra
        note right : c9 - Actualizar Stock\nes tan simple que no valía la pena ponerle una ref.
        compra -> libro : actualizar_stock(cantidad)
        activate libro
            note right : se descuenta del stock la \ncantidad de libros indicada
            compra <-- libro
        deactivate libro

        compra -> cliente : descontar_monto(monto)
        activate cliente
            cliente -> cuenta : ok = descontar_monto(monto)
            activate cuenta
                cliente <-- cuenta : ok
            deactivate cuenta
            
            compra <-- cliente : ok
        deactivate cliente

        l <-- compra : ok
    deactivate compra


    l -> cliente : cambiar_categoria()
    note right : c14 - Cambiar categoría cliente\nlo dejo aca en vez de hacerle una ref y dejarlo en otro diagrama
    activate cliente
        cliente -> cliente : compras = obtener_compras()
        loop montos = 0; compra in compras
            alt compra.fecha >= inicio_mes
                cliente -> compra : agregar_monto_para_cambio_categoria(montos)
                activate compra
                deactivate compra
            end
        end 
        alt montos > 5000
            cliente -> vip ** : categoria = <<crear>>
            cliente -> cliente : asignar_categoria(categoria)
        end
        l <-- cliente
    deactivate cliente

    c <-- l
deactivate l

deactivate c

@enduml


