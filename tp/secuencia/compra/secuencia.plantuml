
@startuml c12 Comprar Libro - Flujo normal

title c12 Comprar Libro - Flujo normal

actor Cliente as c
participant Sistema as s
participant Libreria as l
participant Compra as compra
participant "libro:Libro" as libro
participant "cliente:Cliente" as cliente
participant "ingreso:Ingreso" as ingreso
participant "cuenta:Cuenta" as cuenta
participant "vip:ClienteVIP" as vip

activate c
c -> s : libros = iniciar_compra(cliente)
activate s
    s -> s : almacenar_en_sesion(cliente)
    s -> l : libros = buscar_libros_disponibles()
    activate l
        loop libro in libros
            l -> libro : agregate_si_stock(libros_disponibles)
        end
        note left : analizar si esta ok o no se modela\n modelar el tema de agregar o filtrar colecciones
        return libros_disponibles
    deactivate l
    c <-- s : libros_disponibles
deactivate s

c -> s : seleccionar_libro(libro)
activate s
    s -> s : cliente = obtener_cliente_de_sesion()
    s -> l : comprar(cliente, libro)
    activate l 
        l -> compra ** : crear
        l -> compra : calcular_costo(cliente, libro)
        activate compra
            'el costo depende del tipo de libro y del tipo de cliente
            compra -> libro : comision = calcular_comision()
            activate libro
                libro -> ingreso : costo = costo()
                activate ingreso
                    libro <-- ingreso : costo
                deactivate ingreso
                note right : analizar tema de ofertas\n como modelarlas\n si es lanzamiento\n si es temporada\n etc
                libro -> libro : comision = calcular_comision(costo)
                compra <-- libro : comision
            deactivate libro
            compra -> cliente : costo_envio = calcular_envio(libro)
            activate cliente
                compra <-- cliente : costo_envio
            deactivate cliente
            compra -> compra : calcular_costo(comision, costo_envio)
            l <-- compra : costo
        deactivate compra
        l -> l : almacenar_compra_a_confirmar(cliente, compra)
        s <-- l : costo
    deactivate l
    return obtener_informacion_pago_para_costo
deactivate s

c -> s : enviar_info_pago(info)
activate s
    s -> s : cliente = obtener_cliente_de_sesion()
    s -> l : finalizar_compra(cliente, info)
    activate l
        l -> l : compra = buscar_compra(cliente)
        l -> compra : finalizar_compra(info)
        activate compra
            compra -> libro : actualizar_stock()
            compra -> cliente : cobrar(costo)
            activate cliente
                cliente -> cuenta : cobrar(costo)
                activate cuenta
                    cliente <-- cuenta: ok
                deactivate cuenta
                compra <-- cliente : ok
            deactivate cliente
            l <-- compra : datos_compra
        deactivate compra
        l -> l : cambiar_categoría_cliente()
        activate l
            loop compra in compras
                alt compra.fecha > principio_mes
                    l -> compra : agregar_costo(ultimos_costos)
                end
            end

            == Esta opción? ==

            alt ultimos_costos > 5000
                l -> cliente : cambiar_categoria_vip()
                activate cliente
                    cliente -> vip **: crear
                    cliente -> cliente : asignar_categoria(vip)
                    l <-- cliente
                deactivate cliente
            end

            == O esta opción ==

            alt ultimos_costos > 5000
                l -> cliente : cambiar_categoria_vip()
                activate cliente
                    cliente -> vip : vip = obtener_instancia()
                    activate vip
                        cliente <-- vip : instancia
                    deactivate vip
                    cliente -> cliente : asignar_categoria(vip)
                    l <-- cliente
                deactivate cliente
            end
        deactivate l
        s <-- l : datos_compra
    deactivate l
    c <-- s : datos_compra
deactivate s

deactivate c

@enduml

@startuml consulta_sobre_modelado1

participant Libreria as l
participant Cliente as cliente
participant "vip:ClienteVIP" as vip

l -> l : cambiar_categoría_cliente()
activate l
    loop compra in compras
        alt compra.fecha > principio_mes
            l -> compra : agregar_costo(ultimos_costos)
        end
    end
    note left : como modelar el tema de las colecciones?\n ultimos_costos=0\nfor compra in compras:\n  if compra.date <= inicio_mes:\n      compra.agregar_costo(ultimos_costos)

    == Esta opción? ==

    alt ultimos_costos > 5000
        l -> cliente : cambiar_categoria_vip()
        activate cliente
            cliente -> vip **: crear
            cliente -> cliente : asignar_categoria(vip)
            l <-- cliente
        deactivate cliente
    end

    == O esta opción ==

    alt ultimos_costos > 5000
        l -> cliente : cambiar_categoria_vip()
        activate cliente
            cliente -> vip : vip = obtener_instancia()
            activate vip
                cliente <-- vip : instancia
            deactivate vip
            cliente -> cliente : asignar_categoria(vip)
            l <-- cliente
        deactivate cliente
    end

    == O inclusive esta\n me gusta un poco mas\n ya que el proceso de selección de categoría dependería de la librería ==

    alt ultimos_costos > 5000
        l -> vip : vip = obtener_instancia()
        activate vip
            l <-- vip : instancia
        deactivate vip

        l -> cliente : cambiar_categoria(vip)
        activate cliente
            l <-- cliente
        deactivate cliente
    end


deactivate l
@enduml

@startuml consulta_sobre_modelado2_categoría

participant Libreria as l
participant Cliente as cliente
participant "vip:ClienteVIP" as vip


l -> l : cambiar_categoría_cliente()
activate l

    == Esta opción? ==

    alt ultimos_costos > 5000
        l -> cliente : cambiar_categoria_vip()
        activate cliente
            cliente -> vip **: crear
            cliente -> cliente : asignar_categoria(vip)
            l <-- cliente
        deactivate cliente
    end

    == O esta opción ==

    alt ultimos_costos > 5000
        l -> cliente : cambiar_categoria_vip()
        activate cliente
            cliente -> vip : vip = obtener_instancia()
            activate vip
                cliente <-- vip : instancia
            deactivate vip
            cliente -> cliente : asignar_categoria(vip)
            l <-- cliente
        deactivate cliente
    end

    == O inclusive esta\n me gusta un poco mas\n ya que el proceso de selección de categoría dependería de la librería ==

    alt ultimos_costos > 5000
        l -> vip : vip = obtener_instancia()
        activate vip
            l <-- vip : instancia
        deactivate vip

        l -> cliente : cambiar_categoria(vip)
        activate cliente
            l <-- cliente
        deactivate cliente
    end


deactivate l
@enduml